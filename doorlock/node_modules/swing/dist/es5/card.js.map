{"version":3,"sources":["card.js"],"names":[],"mappings":"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","file":"card.js","sourcesContent":["import Sister from 'sister';\nimport Hammer from 'hammerjs';\nimport rebound from 'rebound';\nimport vendorPrefix from 'vendor-prefix';\nimport util from './util.js';\nimport raf from 'raf';\n\nlet Card;\n\n/**\n * @param {Stack} stack\n * @param {HTMLElement} targetElement\n * @return {Object} An instance of Card.\n */\nCard = (stack, targetElement) => {\n    let card,\n        config,\n        construct,\n        currentX,\n        currentY,\n        doMove,\n        eventEmitter,\n        isDraging,\n        lastThrow,\n        lastTranslate,\n        lastX,\n        lastY,\n        mc,\n        onSpringUpdate,\n        springSystem,\n        springThrowIn,\n        springThrowOut,\n        throwOutDistance,\n        throwWhere;\n\n    construct = () => {\n        card = {};\n        config = Card.makeConfig(stack.getConfig());\n        eventEmitter = Sister();\n        springSystem = stack.getSpringSystem();\n        springThrowIn = springSystem.createSpring(250, 10);\n        springThrowOut = springSystem.createSpring(500, 20);\n        lastThrow = {};\n        lastTranslate = {\n            x: 0,\n            y: 0\n        };\n\n        springThrowIn.setRestSpeedThreshold(0.05);\n        springThrowIn.setRestDisplacementThreshold(0.05);\n\n        springThrowOut.setRestSpeedThreshold(0.05);\n        springThrowOut.setRestDisplacementThreshold(0.05);\n\n        throwOutDistance = config.throwOutDistance(config.minThrowOutDistance, config.maxThrowOutDistance);\n\n        mc = new Hammer.Manager(targetElement, {\n            recognizers: [\n                [\n                    Hammer.Pan,\n                    {\n                        threshold: 2\n                    }\n                ]\n            ]\n        });\n\n        Card.appendToParent(targetElement);\n\n        eventEmitter.on('panstart', () => {\n            Card.appendToParent(targetElement);\n\n            eventEmitter.trigger('dragstart', {\n                target: targetElement\n            });\n\n            currentX = 0;\n            currentY = 0;\n\n            isDraging = true;\n\n            (function animation () {\n                if (isDraging) {\n                    doMove();\n\n                    raf(animation);\n                }\n            })();\n        });\n\n        eventEmitter.on('panmove', (e) => {\n            currentX = e.deltaX;\n            currentY = e.deltaY;\n        });\n\n        eventEmitter.on('panend', (e) => {\n            let x,\n                y;\n\n            isDraging = false;\n\n            x = lastTranslate.x + e.deltaX;\n            y = lastTranslate.y + e.deltaY;\n\n            if (config.isThrowOut(x, targetElement, config.throwOutConfidence(x, targetElement))) {\n                card.throwOut(x, y);\n            } else {\n                card.throwIn(x, y);\n            }\n\n            eventEmitter.trigger('dragend', {\n                target: targetElement\n            });\n        });\n\n        // \"mousedown\" event fires late on touch enabled devices, thus listening\n        // to the touchstart event for touch enabled devices and mousedown otherwise.\n        if (util.isTouchDevice()) {\n            targetElement.addEventListener('touchstart', () => {\n                eventEmitter.trigger('panstart');\n            });\n\n            // Disable scrolling while dragging the element on the touch enabled devices.\n            // @see http://stackoverflow.com/a/12090055/368691\n            (() => {\n                let dragging;\n\n                targetElement.addEventListener('touchstart', () => {\n                    dragging = true;\n                });\n\n                targetElement.addEventListener('touchend', () => {\n                    dragging = false;\n                });\n\n                global.addEventListener('touchmove', (e) => {\n                    if (dragging) {\n                        e.preventDefault();\n                    }\n                });\n            })();\n        } else {\n            targetElement.addEventListener('mousedown', () => {\n                eventEmitter.trigger('panstart');\n            });\n        }\n\n        mc.on('panmove', (e) => {\n            eventEmitter.trigger('panmove', e);\n        });\n\n        mc.on('panend', (e) => {\n            eventEmitter.trigger('panend', e);\n        });\n\n        springThrowIn.addListener({\n            onSpringUpdate: (spring) => {\n                let value,\n                    x,\n                    y;\n\n                value = spring.getCurrentValue();\n                x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, 0);\n                y = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromY, 0);\n\n                onSpringUpdate(x, y);\n            },\n            onSpringAtRest: () => {\n                eventEmitter.trigger('throwinend', {\n                    target: targetElement\n                });\n            }\n        });\n\n        springThrowOut.addListener({\n            onSpringUpdate: (spring) => {\n                let value,\n                    x,\n                    y;\n\n                value = spring.getCurrentValue();\n                x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, throwOutDistance * lastThrow.direction);\n                y = lastThrow.fromY;\n\n                onSpringUpdate(x, y);\n            },\n            onSpringAtRest: () => {\n                eventEmitter.trigger('throwoutend', {\n                    target: targetElement\n                });\n            }\n        });\n\n        /**\n         * Transforms card position based on the current environment variables.\n         *\n         * @return {undefined}\n         */\n        doMove = () => {\n            let r,\n                x,\n                y;\n\n            if (currentX === lastX && currentY === lastY) {\n                return;\n            }\n\n            lastX = currentX;\n            lastY = currentY;\n\n            x = lastTranslate.x + currentX;\n            y = lastTranslate.y + currentY;\n            r = config.rotation(x, y, targetElement, config.maxRotation);\n\n            config.transform(targetElement, x, y, r);\n\n            eventEmitter.trigger('dragmove', {\n                target: targetElement,\n                throwOutConfidence: config.throwOutConfidence(x, targetElement),\n                throwDirection: x < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT\n            });\n        };\n\n        /**\n         * Invoked every time the physics solver updates the Spring's value.\n         *\n         * @param {Number} x\n         * @param {Number} y\n         * @return {undefined}\n         */\n        onSpringUpdate = (x, y) => {\n            let r;\n\n            r = config.rotation(x, y, targetElement, config.maxRotation);\n\n            lastTranslate.x = x || 0;\n            lastTranslate.y = y || 0;\n\n            Card.transform(targetElement, x, y, r);\n        };\n\n        /**\n         * @param {Card.THROW_IN|Card.THROW_OUT} where\n         * @param {Number} fromX\n         * @param {Number} fromY\n         * @return {undefined}\n         */\n        throwWhere = (where, fromX, fromY) => {\n            lastThrow.fromX = fromX;\n            lastThrow.fromY = fromY;\n            lastThrow.direction = lastThrow.fromX < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT;\n\n            if (where === Card.THROW_IN) {\n                springThrowIn.setCurrentValue(0).setAtRest().setEndValue(1);\n\n                eventEmitter.trigger('throwin', {\n                    target: targetElement,\n                    throwDirection: lastThrow.direction\n                });\n            } else if (where === Card.THROW_OUT) {\n                springThrowOut.setCurrentValue(0).setAtRest().setVelocity(100).setEndValue(1);\n\n                eventEmitter.trigger('throwout', {\n                    target: targetElement,\n                    throwDirection: lastThrow.direction\n                });\n\n                if (lastThrow.direction === Card.DIRECTION_LEFT) {\n                    eventEmitter.trigger('throwoutleft', {\n                        target: targetElement,\n                        throwDirection: lastThrow.direction\n                    });\n                } else {\n                    eventEmitter.trigger('throwoutright', {\n                        target: targetElement,\n                        throwDirection: lastThrow.direction\n                    });\n                }\n            } else {\n                throw new Error('Invalid throw event.');\n            }\n        };\n    };\n\n    construct();\n\n    /**\n     * Alias\n     */\n    card.on = eventEmitter.on;\n    card.trigger = eventEmitter.trigger;\n\n    /**\n     * Throws a card into the stack from an arbitrary position.\n     *\n     * @param {Number} fromX\n     * @param {Number} fromY\n     * @return {undefined}\n     */\n    card.throwIn = (fromX, fromY) => {\n        throwWhere(Card.THROW_IN, fromX, fromY);\n    };\n\n    /**\n     * Throws a card out of the stack in the direction away from the original offset.\n     *\n     * @param {Number} fromX\n     * @param {Number} fromY\n     * @return {undefined}\n     */\n    card.throwOut = (fromX, fromY) => {\n        throwWhere(Card.THROW_OUT, fromX, fromY);\n    };\n\n    /**\n     * Unbinds all Hammer.Manager events.\n     * Removes the listeners from the physics simulation.\n     *\n     * @return {undefined}\n     */\n    card.destroy = () => {\n        mc.destroy();\n        springThrowIn.destroy();\n        springThrowOut.destroy();\n\n        stack.destroyCard(card);\n    };\n\n    return card;\n};\n\n/**\n * Creates a configuration object.\n *\n * @param {Object} config\n * @return {Object}\n */\nCard.makeConfig = (config = {}) => {\n    let defaultConfig;\n\n    defaultConfig = {\n        isThrowOut: Card.isThrowOut,\n        throwOutConfidence: Card.throwOutConfidence,\n        throwOutDistance: Card.throwOutDistance,\n        minThrowOutDistance: 400,\n        maxThrowOutDistance: 500,\n        rotation: Card.rotation,\n        maxRotation: 20,\n        transform: Card.transform\n    };\n\n    return util.assign({}, defaultConfig, config);\n};\n\n/**\n * Uses CSS transform to translate element position and rotation.\n *\n * Invoked in the event of `dragmove` and every time the physics solver is triggered.\n *\n * @param {HTMLElement} element\n * @param {Number} x Horizontal offset from the startDrag.\n * @param {Number} y Vertical offset from the startDrag.\n * @param {Number} r\n * @return {undefined}\n */\nCard.transform = (element, x, y, r) => {\n    element.style[vendorPrefix('transform')] = `translate3d(0, 0, 0) translate(${x}px, ${y}px) rotate(${r}deg)`;\n};\n\n/**\n * Append element to the parentNode.\n *\n * This makes the element first among the siblings. The reason for using\n * this as opposed to zIndex is to allow CSS selector :nth-child.\n *\n * Invoked in the event of mousedown.\n * Invoked when card is added to the stack.\n *\n * @param {HTMLElement} element The target element.\n * @return {undefined}\n */\nCard.appendToParent = (element) => {\n    let parentNode,\n        siblings,\n        targetIndex;\n\n    parentNode = element.parentNode;\n    siblings = util.elementChildren(parentNode);\n    targetIndex = siblings.indexOf(element);\n\n    if (targetIndex + 1 !== siblings.length) {\n        parentNode.removeChild(element);\n        parentNode.appendChild(element);\n    }\n};\n\n/**\n * Returns a value between 0 and 1 indicating the completeness of the throw out condition.\n *\n * Ration of the absolute distance from the original card position and element width.\n *\n * @param {Number} offset Distance from the dragStart.\n * @param {HTMLElement} element Element.\n * @return {Number}\n */\nCard.throwOutConfidence = (offset, element) => {\n    return Math.min(Math.abs(offset) / element.offsetWidth, 1);\n};\n\n/**\n * Determines if element is being thrown out of the stack.\n *\n * Element is considered to be thrown out when throwOutConfidence is equal to 1.\n *\n * @param {Number} offset Distance from the dragStart.\n * @param {HTMLElement} element Element.\n * @param {Number} throwOutConfidence config.throwOutConfidence\n * @return {Boolean}\n */\nCard.isThrowOut = (offset, element, throwOutConfidence) => {\n    return throwOutConfidence === 1;\n};\n\n/**\n * Calculates a distances at which the card is thrown out of the stack.\n *\n * @param {Number} min\n * @param {Number} max\n * @return {Number}\n */\nCard.throwOutDistance = (min, max) => {\n    return util.random(min, max);\n};\n\n/**\n * Calculates rotation based on the element x and y offset, element width and maxRotation variables.\n *\n * @param {Number} x Horizontal offset from the startDrag.\n * @param {Number} y Vertical offset from the startDrag.\n * @param {HTMLElement} element Element.\n * @param {Number} maxRotation\n * @return {Number} Rotation angle expressed in degrees.\n */\nCard.rotation = (x, y, element, maxRotation) => {\n    let horizontalOffset,\n        rotation,\n        verticalOffset;\n\n    horizontalOffset = Math.min(Math.max(x / element.offsetWidth, -1), 1);\n    verticalOffset = (y > 0 ? 1 : -1) * Math.min(Math.abs(y) / 100, 1);\n    rotation = horizontalOffset * verticalOffset * maxRotation;\n\n    return rotation;\n};\n\nCard.DIRECTION_LEFT = -1;\nCard.DIRECTION_RIGHT = 1;\n\nCard.THROW_IN = 'in';\nCard.THROW_OUT = 'out';\n\nexport default Card;\n"],"sourceRoot":"/source/"}