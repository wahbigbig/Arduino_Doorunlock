{"version":3,"sources":["stack.js"],"names":[],"mappings":";;;;;;;;sBAAmB,QAAQ;;;;uBACP,SAAS;;;;oBACZ,QAAQ;;;;oBACR,QAAQ;;;;AAEzB,IAAI,KAAK,YAAA,CAAC;;;;;;AAMV,KAAK,GAAG,UAAC,MAAM,EAAK;AAChB,QAAI,SAAS,YAAA;QACT,YAAY,YAAA;QACZ,KAAK,YAAA;QACL,YAAY,YAAA;QACZ,KAAK,YAAA,CAAC;;AAEV,aAAS,GAAG,YAAM;AACd,aAAK,GAAG,EAAE,CAAC;AACX,oBAAY,GAAG,IAAI,qBAAQ,YAAY,EAAE,CAAC;AAC1C,oBAAY,GAAG,0BAAQ,CAAC;AACxB,aAAK,GAAG,EAAE,CAAC;KACd,CAAC;;AAEF,aAAS,EAAE,CAAC;;;;;;;AAOZ,SAAK,CAAC,SAAS,GAAG;eAAM,MAAM;KAAA,CAAC;;;;;;;AAO/B,SAAK,CAAC,eAAe,GAAG;eAAM,YAAY;KAAA,CAAC;;;;;;;;;AAS3C,SAAK,CAAC,EAAE,GAAG,UAAC,SAAS,EAAE,QAAQ,EAAK;AAChC,oBAAY,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;KACxC,CAAC;;;;;;;;AAQF,SAAK,CAAC,UAAU,GAAG,UAAC,OAAO,EAAK;AAC5B,YAAI,IAAI,YAAA;YACJ,MAAM,YAAA,CAAC;;AAEX,YAAI,GAAG,uBAAK,KAAK,EAAE,OAAO,CAAC,CAAC;;AAE5B,cAAM,GAAG,CACL,UAAU,EACV,aAAa,EACb,cAAc,EACd,eAAe,EACf,SAAS,EACT,YAAY,EACZ,WAAW,EACX,UAAU,EACV,SAAS,CACZ,CAAC;;;AAGF,cAAM,CAAC,OAAO,CAAC,UAAC,SAAS,EAAK;AAC1B,gBAAI,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,IAAI,EAAK;AACzB,4BAAY,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;aACzC,CAAC,CAAC;SACN,CAAC,CAAC;;AAEH,aAAK,CAAC,IAAI,CAAC;AACP,mBAAO,EAAP,OAAO;AACP,gBAAI,EAAJ,IAAI;SACP,CAAC,CAAC;;AAEH,eAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;AAQF,SAAK,CAAC,OAAO,GAAG,UAAC,OAAO,EAAK;AACzB,YAAI,IAAI,YAAA,CAAC;;AAET,YAAI,GAAG,kBAAK,IAAI,CAAC,KAAK,EAAE;AACpB,mBAAO,EAAP,OAAO;SACV,CAAC,CAAC;;AAEH,YAAI,IAAI,EAAE;AACN,mBAAO,IAAI,CAAC,IAAI,CAAC;SACpB;;AAED,eAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;AAQF,SAAK,CAAC,WAAW,GAAG,UAAC,IAAI,EAAK;AAC1B,eAAO,kBAAK,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KACnC,CAAC;;AAEF,WAAO,KAAK,CAAC;CAChB,CAAC;;qBAEa,KAAK","file":"stack.js","sourcesContent":["import Sister from 'sister';\nimport rebound from 'rebound';\nimport Card from './card';\nimport util from './util';\n\nlet Stack;\n\n/**\n * @param {Object} config Stack configuration.\n * @return {Object} An instance of Stack object.\n */\nStack = (config) => {\n    let construct,\n        eventEmitter,\n        index,\n        springSystem,\n        stack;\n\n    construct = () => {\n        stack = {};\n        springSystem = new rebound.SpringSystem();\n        eventEmitter = Sister();\n        index = [];\n    };\n\n    construct();\n\n    /**\n     * Get the configuration object.\n     *\n     * @return {Object}\n     */\n    stack.getConfig = () => config;\n\n    /**\n     * Get a singleton instance of the SpringSystem physics engine.\n     *\n     * @return {Sister}\n     */\n    stack.getSpringSystem = () => springSystem;\n\n    /**\n     * Proxy to the instance of the event emitter.\n     *\n     * @param {String} eventName\n     * @param {String} listener\n     * @return {undefined}\n     */\n    stack.on = (eventName, listener) => {\n        eventEmitter.on(eventName, listener);\n    };\n\n    /**\n     * Creates an instance of Card and associates it with an element.\n     *\n     * @param {HTMLElement} element\n     * @return {Card}\n     */\n    stack.createCard = (element) => {\n        let card,\n            events;\n\n        card = Card(stack, element);\n\n        events = [\n            'throwout',\n            'throwoutend',\n            'throwoutleft',\n            'throwoutright',\n            'throwin',\n            'throwinend',\n            'dragstart',\n            'dragmove',\n            'dragend'\n        ];\n\n        // Proxy Card events to the Stack.\n        events.forEach((eventName) => {\n            card.on(eventName, (data) => {\n                eventEmitter.trigger(eventName, data);\n            });\n        });\n\n        index.push({\n            element,\n            card\n        });\n\n        return card;\n    };\n\n    /**\n     * Returns an instance of Card associated with an element.\n     *\n     * @param {HTMLElement} element\n     * @return {Card|null}\n     */\n    stack.getCard = (element) => {\n        let card;\n\n        card = util.find(index, {\n            element\n        });\n\n        if (card) {\n            return card.card;\n        }\n\n        return null;\n    };\n\n    /**\n     * Remove an instance of Card from the stack index.\n     *\n     * @param {Card} card\n     * @return {Card}\n     */\n    stack.destroyCard = (card) => {\n        return util.remove(index, card);\n    };\n\n    return stack;\n};\n\nexport default Stack;\n"],"sourceRoot":"/source/"}